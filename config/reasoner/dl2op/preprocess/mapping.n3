PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX persoon: <http://data.vlaanderen.be/ns/persoon#>


# DL and OP both use persoon:gebruikteVoornaam but with different semantics (!)
# Hence the mapping is in two steps.
# The first step maps the DL persoon:gebruikteVoornaam to the OP counterpart
# and drops the DL persoon:gebruikteVoornaam statements with e:becomes
# A second reasoning will map DL foaf:name to OP persoon:gebruikteVoornaam
# Doing both at once would lead all DL foaf:names to incorrectly become foaf:givennames
# in OP

# First name
# persoon:gebruikteVoornaam => foaf:givenName
# Alternatieve voornaam
# foaf:name => persoon:gebruikteVoornaam

# Test Mock DL
# <http://example.org/person> persoon:gebruikteVoornaam "Didier".

{
  {
    ?s persoon:gebruikteVoornaam ?o
  } e:becomes {
    ?s foaf:givenName ?o
  }
} => {
  ?s foaf:givenName ?o
}.

# Extend identifiers to match OP's model
# Preprocessing step will construct the structured identifier
# Main step will add the "Rijksregisternummer" label to the ientifier
# We have to split it because otherwise the "Rijksregisternummer" label also gets added to the structured identifier
# <http://example.org/tst#subject> skos:notation "00010100105".
{
  ?identifier skos:notation ?notation.
  ?identifier log:uri ?identifierString.
  (?identifierString "STRUCTURED_IDENTIFIER") string:concatenation ?hashInput.
  ?hashInput crypto:md5 ?uuid.
  ("http://data.lblod.info/id/gestructureerdeIdentificatoren/" ?uuid) string:concatenation ?structuredIdString.
  ?structuredIdentifier log:uri ?structuredIdString.
} => {
  ?identifier
    generiek:gestructureerdeIdentificator ?structuredIdentifier .

  ?structuredIdentifier a generiek:GestructureerdeIdentificator ;
    mu:uuid ?uuid ;
    generiek:lokaleIdentificator ?notation .
}.
