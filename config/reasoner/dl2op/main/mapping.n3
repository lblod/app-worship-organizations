PREFIX : <#>
PREFIX adres: <https://data.vlaanderen.be/ns/adres#>
PREFIX besluit: <http://data.vlaanderen.be/ns/besluit#>
PREFIX crypto: <http://www.w3.org/2000/10/swap/crypto#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX ex: <http://example.org/test#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX func: <http://www.w3.org/2007/rif-builtin-function#>
PREFIX generiek: <https://data.vlaanderen.be/ns/generiek#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX mandaat: <http://data.vlaanderen.be/ns/mandaat#>
PREFIX mu: <http://mu.semte.ch/vocabularies/core/>
PREFIX org: <http://www.w3.org/ns/org#>
PREFIX persoon: <https://data.vlaanderen.be/ns/persoon#>
PREFIX persoon_loket: <http://data.vlaanderen.be/ns/persoon#>
PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
PREFIX string: <http://www.w3.org/2000/10/swap/string#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>


# DL and OP both use persoon:gebruikteVoornaam but with different semantics (!)
# Hence the mapping is in two steps.
# The first step maps the DL persoon:gebruikteVoornaam to the OP counterpart
# and drops the DL persoon:gebruikteVoornaam statements with e:becomes
# A second reasoning will map DL foaf:name to OP persoon:gebruikteVoornaam
# Doing both at once would lead all DL foaf:names to incorrectly become foaf:givennames
# in OP

# First name
# persoon:gebruikteVoornaam => foaf:givenName
# Alternatieve voornaam
# foaf:name => persoon:gebruikteVoornaam

# Test Mock DL
# <http://example.org/person> persoon_loket:gebruikteVoornaam "Didier".

{
  {
    ?s persoon_loket:gebruikteVoornaam ?o
  } e:becomes {
    ?s foaf:givenName ?o
  }
} => {
  ?s foaf:givenName ?o
}.


# First name
# persoon:gebruikteVoornaam => foaf:givenName (done in pre-processing)
# Alternatieve voornaam
# foaf:name => persoon:gebruikteVoornaam

# Test Mock LLB
# <http://example.org/person> foaf:name "Didier".
{
  {
    ?s foaf:name ?o
  } e:becomes {
    ?s persoon:gebruikteVoornaam ?o
  }
} => {
  ?s persoon:gebruikteVoornaam ?o
}.

# Test
# ex:s <http://data.vlaanderen.be/ns/mandaat#start> "2019-01-01T19:32:52+00:00"^^xsd:dateTime.
{
  ?s mandaat:start ?startDateTime.
  # use backward arrow rule defined below
  ?startDateTime :dateFromDateTime ?startDate.
  {
    ?s mandaat:start ?startDateTime
  } e:becomes {
    ?s mandaat:start ?startDate
  }.
} => {
  ?s mandaat:start ?startDate
}.

# ex:s <http://data.vlaanderen.be/ns/mandaat#einde> "2019-02-01T10:32:52+00:00"^^xsd:dateTime.
{
  ?s mandaat:einde ?eindeDateTime.
  # use backward arrow rule defined below
  ?eindeDateTime :dateFromDateTime ?eindeDate.
  {
    ?s mandaat:einde ?eindeDateTime
  } e:becomes {
    ?s mandaat:einde ?eindeDate
  }.
} => {
  ?s mandaat:einde ?eindeDate
}.


# Backward arrow rule is like a function call.
# Removes time info in the returned date
# The user in DL selects a date via the UI.
# These dates are persisted as midnight dateTimes in UTC.
# Meaning that 1st of July is stored as
# "2022-06-30T22:00:00Z"^^xsd:dateTime
# and 1 December
# "2022-11-30T23:00:00Z"^^xsd:dateTime
# So, the following rule adds 2 hours to the datetime, and then takes the date part of the UTC date time
# to come to the date that the DL user selected (in CE(S)T)
{
   ?dateTime :dateFromDateTime ?date
} <= {
  (?dateTimeLiteral xsd:dateTime) log:dtlit ?dateTime.
  (?dateTime "PT2H"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime ?localDateTime.
  (?localDateTimeLiteral xsd:dateTime) log:dtlit ?localDateTime.
  (?localDateTimeLiteral 0 11) func:substring ?dateLiteral.
  (?dateLiteral xsd:date) log:dtlit ?date.
}.


# ex:orgA besluit:classificatie <http://data.vlaanderen.be/id/concept/BestuurseenheidClassificatieCode/5ab0e9b8a3b2ca7c5e000002>.
{
  {
    ?s besluit:classificatie ?o
  } e:becomes {
    ?s org:classification ?o
  }
} => {
  ?s org:classification ?o
}.

# fix typo V -> v
# <http://data.lblod.info/id/adressen/606D972BC20E70000900001C> 	<https://data.vlaanderen.be/ns/adres#AdresVoorstelling.huisnummer>	"1" .
{
  {
    ?s adres:AdresVoorstelling.huisnummer ?o
  } e:becomes {
    ?s adres:Adresvoorstelling.huisnummer ?o
  }
} => {
  ?s adres:Adresvoorstelling.huisnummer ?o
}.

# Rijksregisternummer
# Extend identifiers to match OP's model
# <http://example.org/tst#subject> skos:notation "00010100105".
{
    ?identifier skos:notation ?notation.
    ?notation string:notEqualIgnoringCase "Rijksregisternummer".
    ?identifier log:uri ?identifierString.
    (?identifierString "STRUCTURED_IDENTIFIER")  string:concatenation ?hashInput.
    ?hashInput crypto:md5 ?uuid.
    ("http://data.lblod.info/id/gestructureerdeIdentificatoren/" ?uuid) string:concatenation ?structuredIdString.
    ?structuredIdentifier log:uri ?structuredIdString.

    {
      ?identifier skos:notation ?notation.
    } e:becomes {
      ?identifier
          generiek:gestructureerdeIdentificator ?structuredIdentifier ;
          skos:notation "Rijksregisternummer" .
    }.

} => {
  ?identifier
    generiek:gestructureerdeIdentificator ?structuredIdentifier ;
    skos:notation "Rijksregisternummer" .

  ?structuredIdentifier a generiek:GestructureerdeIdentificator ;
    mu:uuid ?uuid ;
    generiek:lokaleIdentificator ?notation
}.


# Map from http persoon to https persoon namespace.

## classes:
{
  {
    ?s a persoon_loket:Afstamming
  } e:becomes {
    ?s a persoon:Afstamming
  }
} => {
  ?s a persoon:Afstamming
}.

{
  {
    ?s a persoon_loket:BurgerlijkeStaat
  } e:becomes {
    ?s a persoon:BurgerlijkeStaat
  }
} => {
  ?s a persoon:BurgerlijkeStaat
}.

{
  {
    ?s a persoon_loket:Domicilie
  } e:becomes {
    ?s a persoon:Domicilie
  }
} => {
  ?s a persoon:Domicilie
}.

{
  {
    ?s a persoon_loket:Geboorte
  } e:becomes {
    ?s a persoon:Geboorte
  }
} => {
  ?s a persoon:Geboorte
}.

{
  {
    ?s a persoon_loket:GeenInwoner
  } e:becomes {
    ?s a persoon:GeenInwoner
  }
} => {
  ?s a persoon:GeenInwoner
}.

{
  {
    ?s a persoon_loket:GeregistreerdPersoon
  } e:becomes {
    ?s a persoon:GeregistreerdPersoon
  }
} => {
  ?s a persoon:GeregistreerdPersoon
}.

{
  {
    ?s a persoon_loket:Gezin
  } e:becomes {
    ?s a persoon:Gezin
  }
} => {
  ?s a persoon:Gezin
}.

{
  {
    ?s a persoon_loket:Gezinsrelatie
  } e:becomes {
    ?s a persoon:Gezinsrelatie
  }
} => {
  ?s a persoon:Gezinsrelatie
}.

{
  {
    ?s a persoon_loket:Huwelijk
  } e:becomes {
    ?s a persoon:Huwelijk
  }
} => {
  ?s a persoon:Huwelijk
}.

{
  {
    ?s a persoon_loket:Inwoner
  } e:becomes {
    ?s a persoon:Inwoner
  }
} => {
  ?s a persoon:Inwoner
}.

{
  {
    ?s a persoon_loket:Inwonerschap
  } e:becomes {
    ?s a persoon:Inwonerschap
  }
} => {
  ?s a persoon:Inwonerschap
}.

{
  {
    ?s a persoon_loket:Nationaliteit
  } e:becomes {
    ?s a persoon:Nationaliteit
  }
} => {
  ?s a persoon:Nationaliteit
}.

{
  {
    ?s a persoon_loket:Overlijden
  } e:becomes {
    ?s a persoon:Overlijden
  }
} => {
  ?s a persoon:Overlijden
}.

{
  {
    ?s a persoon_loket:PermanentInwoner
  } e:becomes {
    ?s a persoon:PermanentInwoner
  }
} => {
  ?s a persoon:PermanentInwoner
}.

{
  {
    ?s a persoon_loket:Persoonsgebeurtenis
  } e:becomes {
    ?s a persoon:Persoonsgebeurtenis
  }
} => {
  ?s a persoon:Persoonsgebeurtenis
}.

{
  {
    ?s a persoon_loket:Persoonsrelatie
  } e:becomes {
    ?s a persoon:Persoonsrelatie
  }
} => {
  ?s a persoon:Persoonsrelatie
}.

{
  {
    ?s a persoon_loket:Samenwonen
  } e:becomes {
    ?s a persoon:Samenwonen
  }
} => {
  ?s a persoon:Samenwonen
}.

{
  {
    ?s a persoon_loket:Staatsburger
  } e:becomes {
    ?s a persoon:Staatsburger
  }
} => {
  ?s a persoon:Staatsburger
}.

{
  {
    ?s a persoon_loket:Staatsburgerschap
  } e:becomes {
    ?s a persoon:Staatsburgerschap
  }
} => {
  ?s a persoon:Staatsburgerschap
}.

{
  {
    ?s a persoon_loket:TijdelijkInwoner
  } e:becomes {
    ?s a persoon:TijdelijkInwoner
  }
} => {
  ?s a persoon:TijdelijkInwoner
}.

{
  {
    ?s a persoon_loket:Verblijfplaats
  } e:becomes {
    ?s a persoon:Verblijfplaats
  }
} => {
  ?s a persoon:Verblijfplaats
}.

{
  {
    ?s a persoon_loket:Voogdij
  } e:becomes {
    ?s a persoon:Voogdij
  }
} => {
  ?s a persoon:Voogdij
}.

{
  {
    ?s a persoon_loket:Vreemdeling
  } e:becomes {
    ?s a persoon:Vreemdeling
  }
} => {
  ?s a persoon:Vreemdeling
}.

## properties
{
  {
    ?s persoon_loket:afstammingsType ?o
  } e:becomes {
    ?s persoon:afstammingsType ?o
  }
} => {
  ?s persoon:afstammingsType ?o
}.

{
  {
    ?s persoon_loket:alternatieveNaam ?o
  } e:becomes {
    ?s persoon:alternatieveNaam ?o
  }
} => {
  ?s persoon:alternatieveNaam ?o
}.

{
  {
    ?s persoon_loket:datum ?o
  } e:becomes {
    ?s persoon:datum ?o
  }
} => {
  ?s persoon:datum ?o
}.

{
  {
    ?s persoon_loket:datumVanAfstamming ?o
  } e:becomes {
    ?s persoon:datumVanAfstamming ?o
  }
} => {
  ?s persoon:datumVanAfstamming ?o
}.

{
  {
    ?s persoon_loket:gebruikteVoornaam ?o
  } e:becomes {
    ?s persoon:gebruikteVoornaam ?o
  }
} => {
  ?s persoon:gebruikteVoornaam ?o
}.

{
  {
    ?s persoon_loket:geslacht ?o
  } e:becomes {
    ?s persoon:geslacht ?o
  }
} => {
  ?s persoon:geslacht ?o
}.

{
  {
    ?s persoon_loket:gezinsadres ?o
  } e:becomes {
    ?s persoon:gezinsadres ?o
  }
} => {
  ?s persoon:gezinsadres ?o
}.

{
  {
    ?s persoon_loket:gezinsrelatietype ?o
  } e:becomes {
    ?s persoon:gezinsrelatietype ?o
  }
} => {
  ?s persoon:gezinsrelatietype ?o
}.

{
  {
    ?s persoon_loket:heeftBurgerlijkeStaat ?o
  } e:becomes {
    ?s persoon:heeftBurgerlijkeStaat ?o
  }
} => {
  ?s persoon:heeftBurgerlijkeStaat ?o
}.

{
  {
    ?s persoon_loket:heeftGeboorte ?o
  } e:becomes {
    ?s persoon:heeftGeboorte ?o
  }
} => {
  ?s persoon:heeftGeboorte ?o
}.

{
  {
    ?s persoon_loket:heeftInwonerschap ?o
  } e:becomes {
    ?s persoon:heeftInwonerschap ?o
  }
} => {
  ?s persoon:heeftInwonerschap ?o
}.

{
  {
    ?s persoon_loket:heeftNationaliteit ?o
  } e:becomes {
    ?s persoon:heeftNationaliteit ?o
  }
} => {
  ?s persoon:heeftNationaliteit ?o
}.

{
  {
    ?s persoon_loket:heeftOverlijden ?o
  } e:becomes {
    ?s persoon:heeftOverlijden ?o
  }
} => {
  ?s persoon:heeftOverlijden ?o
}.

{
  {
    ?s persoon_loket:heeftPersoonsrelatie ?o
  } e:becomes {
    ?s persoon:heeftPersoonsrelatie ?o
  }
} => {
  ?s persoon:heeftPersoonsrelatie ?o
}.

{
  {
    ?s persoon_loket:heeftStaatsburgerschap ?o
  } e:becomes {
    ?s persoon:heeftStaatsburgerschap ?o
  }
} => {
  ?s persoon:heeftStaatsburgerschap ?o
}.

{
  {
    ?s persoon_loket:heeftVerblijfplaats ?o
  } e:becomes {
    ?s persoon:heeftVerblijfplaats ?o
  }
} => {
  ?s persoon:heeftVerblijfplaats ?o
}.

{
  {
    ?s persoon_loket:Inwonerschap.binnenJurisdictie ?o
  } e:becomes {
    ?s persoon:Inwonerschap.binnenJurisdictie ?o
  }
} => {
  ?s persoon:Inwonerschap.binnenJurisdictie ?o
}.

{
  {
    ?s persoon_loket:isHoofdVan ?o
  } e:becomes {
    ?s persoon:isHoofdVan ?o
  }
} => {
  ?s persoon:isHoofdVan ?o
}.

{
  {
    ?s persoon_loket:isLidVan ?o
  } e:becomes {
    ?s persoon:isLidVan ?o
  }
} => {
  ?s persoon:isLidVan ?o
}.

{
  {
    ?s persoon_loket:isRelatieMet ?o
  } e:becomes {
    ?s persoon:isRelatieMet ?o
  }
} => {
  ?s persoon:isRelatieMet ?o
}.

{
  {
    ?s persoon_loket:land ?o
  } e:becomes {
    ?s persoon:land ?o
  }
} => {
  ?s persoon:land ?o
}.

{
  {
    ?s persoon_loket:nationaliteit ?o
  } e:becomes {
    ?s persoon:nationaliteit ?o
  }
} => {
  ?s persoon:nationaliteit ?o
}.

{
  {
    ?s persoon_loket:plaats ?o
  } e:becomes {
    ?s persoon:plaats ?o
  }
} => {
  ?s persoon:plaats ?o
}.

{
  {
    ?s persoon_loket:registratie ?o
  } e:becomes {
    ?s persoon:registratie ?o
  }
} => {
  ?s persoon:registratie ?o
}.

{
  {
    ?s persoon_loket:Staatsburgerschap.binnenJurisdictie ?o
  } e:becomes {
    ?s persoon:Staatsburgerschap.binnenJurisdictie ?o
  }
} => {
  ?s persoon:Staatsburgerschap.binnenJurisdictie ?o
}.

{
  {
    ?s persoon_loket:type ?o
  } e:becomes {
    ?s persoon:type ?o
  }
} => {
  ?s persoon:type ?o
}.

{
  {
    ?s persoon_loket:verblijfsadres ?o
  } e:becomes {
    ?s persoon:verblijfsadres ?o
  }
} => {
  ?s persoon:verblijfsadres ?o
}.

{
  {
    ?s persoon_loket:volledigeNaam ?o
  } e:becomes {
    ?s persoon:volledigeNaam ?o
  }
} => {
  ?s persoon:volledigeNaam ?o
}.